package dev.langchain4j.model.chat.response;

import dev.langchain4j.agent.tool.CompleteToolCall;
import dev.langchain4j.agent.tool.PartialToolCall;
import dev.langchain4j.model.chat.StreamingChatModel;

/**
 * Represents a handler for a {@link StreamingChatModel} response.
 *
 * @see StreamingChatModel
 */
public interface StreamingChatResponseHandler {

    /**
     * Invoked each time the model generates a partial text response, usually a single token.
     * <p>
     * Please note that some LLM providers do not stream individual tokens, but send responses in batches.
     * In such cases, this callback may receive multiple tokens at once.
     *
     * @param partialResponse A partial response, usually a single token.
     */
    void onPartialResponse(String partialResponse);

    /**
     * This callback is invoked each time the model generates a partial tool call,
     * which contains a single token of the tool's arguments.
     * It is typically invoked multiple times for a single tool call
     * until {@link #onCompleteToolCall(CompleteToolCall)} is eventually invoked,
     * indicating that the streaming for that tool call is finished.
     * <p>
     * Here's an example of what streaming a single tool call might look like:
     * <pre>
     * 1. onPartialToolCall(index = 0, id = "call_abc", name = "get_weather", partiaArguments = "{\"")
     * 2. onPartialToolCall(index = 0, id = "call_abc", name = "get_weather", partiaArguments = "city")
     * 3. onPartialToolCall(index = 0, id = "call_abc", name = "get_weather", partiaArguments = ""\":\"")
     * 4. onPartialToolCall(index = 0, id = "call_abc", name = "get_weather", partiaArguments = "Mun")
     * 5. onPartialToolCall(index = 0, id = "call_abc", name = "get_weather", partiaArguments = "ich")
     * 6. onPartialToolCall(index = 0, id = "call_abc", name = "get_weather", partiaArguments = "\"}")
     * 7. onCompleteToolCall(index = 0, id = "call_abc", name = "get_weather", arguments = "{\"city\":\"Munich\"}")
     * </pre>
     *
     * If the model decides to call multiple tools, the index will increment, allowing you to correlate.
     * <p>
     * Please note that not all LLM providers stream tool calls token by token.
     * Some providers (e.g., Bedrock, Google, Mistral, Ollama) return complete tool calls instead.
     * In those cases, this callback won't be invoked - only {@link #onCompleteToolCall(CompleteToolCall)}
     * will be called.
     *
     * @param partialToolCall A partial tool call that contains
     *                        the index, tool ID, tool name and partial arguments.
     */
    default void onPartialToolCall(PartialToolCall partialToolCall) {
    }

/**
 * Invoked when the model has finished streaming a complete tool call.
 *
 * @param completeToolCall A complete tool call that contains
 *                         the index, tool ID, tool name, and fully assembled arguments.
 */
default void onCompleteToolCall(CompleteToolCall completeToolCall) {
}

    /**
     * Invoked when the model has finished streaming a response.
     *
     * @param completeResponse The complete response generated by the model,
     *                         containing all assembled partial text and tool calls.
     */
    void onCompleteResponse(ChatResponse completeResponse);

    /**
     * This method is invoked when an error occurs during streaming.
     *
     * @param error The error that occurred
     */
    void onError(Throwable error);
}
