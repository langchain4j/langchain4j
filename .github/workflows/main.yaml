name: Java CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - 'LICENSE'
      - '.github/*.md'
      - '.github/*.yml'
      - '.github/*.conf'
      - '.github/ISSUE_TEMPLATE/*.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - 'LICENSE'
      - '.github/*.md'
      - '.github/*.yml'
      - '.github/*.conf'
      - '.github/ISSUE_TEMPLATE/*.md'

jobs:
  java_build:
    strategy:
      matrix:
        java_version: [8, 11, 17, 21]
        include:
          - java_version: '8'
            included_modules: '-pl !langchain4j-jlama,!code-execution-engines/langchain4j-code-execution-engine-graalvm-polyglot,!langchain4j-cassandra,!langchain4j-infinispan,!langchain4j-neo4j,!langchain4j-opensearch,!langchain4j-azure-ai-search'
          - java_version: '11'
            included_modules: '-pl !langchain4j-jlama,!code-execution-engines/langchain4j-code-execution-engine-graalvm-polyglot,!langchain4j-infinispan,!langchain4j-neo4j'
          - java_version: '17'
            included_modules: '-pl !langchain4j-jlama,!code-execution-engines/langchain4j-code-execution-engine-graalvm-polyglot'
          - java_version: '21'
            included_modules: ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create branch from commit by event name
        run: |
          if [[ '${{ github.event_name }}' == 'push' ]]; then
            git branch __branch_before ${{ github.event.before }}
          elif [[ "${{ github.event_name }}" == 'pull_request' ]]; then
            git branch __branch_before ${{ github.event.pull_request.base.sha }}
          fi
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java_version }}
          distribution: 'temurin'
          cache: 'maven'
      - name: Build with JDK ${{ matrix.java_version }}
        run: mvn -B -U install ${{ matrix.included_modules }} -Dgib.disable=false -Dgib.referenceBranch=__branch_before
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
          AZURE_SEARCH_ENDPOINT: ${{ secrets.AZURE_SEARCH_ENDPOINT }}
          AZURE_SEARCH_KEY: ${{ secrets.AZURE_SEARCH_KEY }}
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
          ELASTICSEARCH_CLOUD_API_KEY: ${{ secrets.ELASTICSEARCH_CLOUD_API_KEY }}
          ELASTICSEARCH_CLOUD_URL: ${{ secrets.ELASTICSEARCH_CLOUD_URL }}
          GCP_CREDENTIALS_JSON: ${{ secrets.GCP_CREDENTIALS_JSON }}
          GCP_LOCATION: ${{ secrets.GCP_LOCATION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_PROJECT_NUM: ${{ secrets.GCP_PROJECT_NUM }}
          GCP_VERTEXAI_ENDPOINT: ${{ secrets.GCP_VERTEXAI_ENDPOINT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOOGLE_AI_GEMINI_API_KEY: ${{ secrets.GOOGLE_AI_GEMINI_API_KEY }}
          HF_API_KEY: ${{ secrets.HF_API_KEY }}
          JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
          MILVUS_API_KEY: ${{ secrets.MILVUS_API_KEY }}
          MILVUS_URI: ${{ secrets.MILVUS_URI }}
          MISTRAL_AI_API_KEY: ${{ secrets.MISTRAL_AI_API_KEY }}
          MONGODB_ATLAS_USERNAME: ${{ secrets.MONGODB_ATLAS_USERNAME }}
          MONGODB_ATLAS_PASSWORD: ${{ secrets.MONGODB_ATLAS_PASSWORD }}
          MONGODB_ATLAS_HOST: ${{ secrets.MONGODB_ATLAS_HOST }}
          NOMIC_API_KEY: ${{ secrets.NOMIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
          VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY }}
          WEAVIATE_API_KEY: ${{ secrets.WEAVIATE_API_KEY }}
          WEAVIATE_HOST: ${{ secrets.WEAVIATE_HOST }}

  # For checking some compliance things (require a recent JDK due to plugins so in a separate step)
  compliance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
        # Check we only rely on permissive licenses in the main parts of the library:
      - name: License Compliance
        run: mvn -P compliance org.honton.chas:license-maven-plugin:compliance

# TODO's
# - enable JDK 17 unit tests for langchain4j-code-execution-engine-graalvm-polyglot
# - setup integration tests
# - these require an openAI (and hugging face, etc) token
# - do so that they always run for commits on main
# - make the running be manually triggered for PRs (we don't want to burn through credits)