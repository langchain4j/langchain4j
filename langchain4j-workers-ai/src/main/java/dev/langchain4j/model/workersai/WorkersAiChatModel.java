package dev.langchain4j.model.workersai;

import dev.langchain4j.agent.tool.ToolSpecification;
import dev.langchain4j.data.message.AiMessage;
import dev.langchain4j.data.message.ChatMessage;
import dev.langchain4j.model.chat.ChatLanguageModel;
import dev.langchain4j.model.output.FinishReason;
import dev.langchain4j.model.output.Response;
import dev.langchain4j.model.workersai.client.AbstractWorkersAIModel;
import dev.langchain4j.model.workersai.client.WorkersAiChatCompletionRequest;
import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * WorkerAI Chat model.
 * <a href="https://developers.cloudflare.com/api/operations/workers-ai-post-run-model">...</a>
 */
@Slf4j
public class WorkersAiChatModel extends AbstractWorkersAIModel implements ChatLanguageModel {

    /**
     * Constructor with Builder.
     *
     * @param builder
     *      builder.
     */
    public WorkersAiChatModel(Builder builder) {
       super(builder);
    }

    /** {@inheritDoc} */
    @Override
    public String generate(String userMessage) {
        return generate(new WorkersAiChatCompletionRequest(WorkersAiChatCompletionRequest.MessageRole.user, userMessage));
    }

    /** {@inheritDoc} */
    @Override
    public Response<AiMessage> generate(@NonNull  ChatMessage... messages) {
        return generate(Arrays.asList(messages));
    }

    /** {@inheritDoc} */
    @Override
    public Response<AiMessage> generate(List<ChatMessage> messages) {
        WorkersAiChatCompletionRequest req = new WorkersAiChatCompletionRequest();
        req.setMessages(messages.stream()
                .map(this::toMessage)
                .collect(Collectors.toList()));
        return new Response<>(new AiMessage(generate(req)),null, FinishReason.STOP);
    }

    /** {@inheritDoc} */
    @Override
    public Response<AiMessage> generate(List<ChatMessage> messages, List<ToolSpecification> toolSpecifications) {
        throw new UnsupportedOperationException("Tools are currently not supported for WorkerAI models");
    }

    /** {@inheritDoc} */
    @Override
    public Response<AiMessage> generate(List<ChatMessage> messages, ToolSpecification toolSpecification) {
        throw new UnsupportedOperationException("Tools are currently not supported for WorkerAI models");
    }

    /**
     * Mapping ChatMessage to ChatTextGenerationRequest.Message
     *
     * @param message
     *      inbound message
     * @return
     *      message for request
     */
    private WorkersAiChatCompletionRequest.Message toMessage(ChatMessage message) {
        return new WorkersAiChatCompletionRequest.Message(
               WorkersAiChatCompletionRequest.MessageRole.valueOf(message.type().name().toLowerCase()),
                message.text());
    }

    /**
     * Invoke endpoint and process error.
     *
     * @param req
     *      request
     * @return
     *      text generated by the model
     */
    private String generate(WorkersAiChatCompletionRequest req) {
        try {
            retrofit2.Response<dev.langchain4j.model.workersai.client.WorkersAiChatCompletionResponse> retrofitResponse = workerAiClient
                    .generateChat(req, accountIdentifier, modelName)
                    .execute();
            processErrors(retrofitResponse.body(), retrofitResponse.errorBody());
            if (retrofitResponse.body() == null) {
                throw new IllegalStateException("Response is empty");
            }
            return retrofitResponse.body().getResult().getResponse();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }


}